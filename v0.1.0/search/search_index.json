{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"n8n-compose","text":"<p>n8n-compose aims to allow you to properly version and reproducably build your n8n workflows. The project consists of two packages, <code>@n8n-compose/core</code> and <code>@n8n-compose/cli</code>. See below for a brief documentation of the features of each. Proper documentation to come!</p> <pre><code>npm install @n8n-compose/cli\n</code></pre>"},{"location":"#example-usage","title":"Example Usage","text":"<p>An example <code>n8n-compose.ts</code> file:</p> <pre><code>import { defineWorkflow } from \"@n8n-compose/core\";\n\nexport default defineWorkflow({\n  name: \"MyWorkflow\",\n  active: true,\n  nodes: [\n    {\n      parameters: {\n        public: true,\n        mode: \"webhook\",\n        options: {\n          responseMode: \"responseNode\",\n        },\n      },\n      position: [250, 300],\n      name: \"ChatTrigger\",\n      type: \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      webhookId: \"...\",\n    },\n    {\n      parameters: {\n        agent: \"conversationalAgent\",\n        promptType: \"define\",\n        text: \"={{ $json.chatInput }}\",\n      },\n      id: \"...\",\n      name: \"AIAgent\",\n      type: \"@n8n/n8n-nodes-langchain.agent\",\n      position: [500, 300],\n    },\n    {\n      parameters: {\n        model: \"gpt-4o\",\n        options: {\n          temperature: 0.1,\n        },\n      },\n      position: [400, 500],\n      name: \"OpenAIChatModel\",\n      type: \"@n8n/n8n-nodes-langchain.lmChatOpenAi\",\n      credentials: {\n        openAiApi: {\n          id: \"...\",\n          name: \"OpenAi account\",\n        },\n      },\n    },\n    {\n      parameters: {\n        respondWith: \"allIncomingItems\",\n        options: {},\n      },\n      position: [850, 300],\n      name: \"RespondToWebhook\",\n      type: \"n8n-nodes-base.respondToWebhook\",\n    },\n  ],\n  connections: [\n    [\n      {\n        node: \"ChatTrigger\",\n        type: \"main\",\n        index: 0,\n      },\n      {\n        node: \"AIAgent\",\n        type: \"main\",\n        index: 0,\n      },\n    ],\n    [\n      {\n        node: \"OpenAIChatModel\",\n        type: \"ai_languageModel\",\n        index: 0,\n      },\n      {\n        node: \"AIAgent\",\n        type: \"ai_languageModel\",\n        index: 0,\n      },\n    ],\n    [\n      {\n        node: \"AIAgent\",\n        type: \"main\",\n        index: 0,\n      },\n      {\n        node: \"RespondToWebhook\",\n        type: \"main\",\n        index: 0,\n      },\n    ],\n  ],\n});\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are more than welcome! Feel free to open issues, discussion, or pull requests to the GitHub repo</p>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>When contributing code, please make sure that both your PR title, and commit titles conform to conventional commits. Also take care to scope any changes by package where applicable (e.g. starting your commit message or PR title with <code>feat(core):</code>)</p>"},{"location":"development/","title":"Development","text":""},{"location":"development/#installing-from-source","title":"Installing from source","text":"<p>Ensure you have Bun installed on your machine, and run </p> <pre><code>bun i\n</code></pre> <p>in the root folder of the repository</p>"},{"location":"development/#repository-structure","title":"Repository structure","text":"<p>The repository hosts two packages, <code>@n8n-compose/core</code> and <code>@n8n-compose/cli</code>. They're found at <code>packages/core</code> and <code>pacakges/cli</code> respectively.</p> <p>Documentation is found under <code>docs/</code>, and split into sections. Take a look at <code>mkdocs.yaml</code>'s <code>nav</code> section to see an overview of the structure.</p>"},{"location":"gettings-started/","title":"Getting Started","text":""},{"location":"gettings-started/#defining-a-workflow","title":"Defining a workflow","text":"<p>To start with defining your workflow, create a file called <code>n8n-compose.ts</code>. You can then provide a workflow definition by calling the <code>defineWorkflow</code> method, which will create a JSON file compatible with n8n's built-in workflow structure. Making the definition looks like</p> <pre><code>import { defineWorkflow } from '@n8n-compose/core';\n\nexport default defineWorkflow({...});\n</code></pre>"},{"location":"gettings-started/#importing-an-existing-workflow","title":"Importing an existing workflow","text":"<p>If you have an existing n8n workflow, you can download it through n8n's UI, and then convert it to a definition compatible with n8n-compose by running</p> <pre><code>n8n-compose import MyWorkflow.json\n</code></pre>"},{"location":"gettings-started/#compiling-back-to-n8ns-workflow-syntax","title":"Compiling back to n8n's workflow syntax","text":"<p>Once you have defined your workflow to your satisfaction in <code>n8n-compose.ts</code>, you can compile it to a form compatible with n8n's workflow definition with </p> <pre><code>n8n-compose build n8n-compose.ts\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Using your favourite package manager, run the equivalent of</p> <pre><code>npm install @n8n-compose/cli\n</code></pre>"},{"location":"cli/","title":"CLI","text":"<p><code>n8n-compose</code>'s CLI exposes three commands as of current, <code>build</code>, <code>diff</code>, and <code>import</code>. For full documentation see the <code>@n8n-compose/cli</code> specific readme.</p>"},{"location":"cli/#build","title":"Build","text":"<p>For building an n8n workflow, either based on a typescript file calling <code>defineWorkflow</code>, or the plain configuration JSON.</p> <p>Usage:</p> <pre><code>n8n-compose build &lt;entryPoint&gt; [options]\n</code></pre>"},{"location":"cli/#diff","title":"Diff","text":"<p>For finding out what would change in the generated workflow if you were to run <code>n8n-compose build</code> on the file.</p> <p>Usage:</p> <pre><code>n8n-compose diff &lt;filePath&gt; [options]\n</code></pre>"},{"location":"cli/#import","title":"Import","text":"<p>For converting a workflow JSON file as exported from n8n into an n8n-compose compatible configuration.</p> <p>Usage:</p> <pre><code>n8n-compose import &lt;filePath&gt; [options]\n</code></pre>"},{"location":"core/","title":"Core","text":"<p>The <code>@n8n-compose/core</code> package exposes the main functions of n8n-compose, such as <code>defineWorkflow</code> for building n8n-workflows from a configuration, and the <code>file</code> function to include the contents of a java- or typescript file into your workflow. For full documentation see the <code>@n8n-compose/core</code> specific readme.</p>"},{"location":"core/usage/","title":"Usage","text":"<p>In your <code>n8n-compose.ts</code> file, import the functions you need from <code>@n8n-compose/core</code>. Most likely, at minimum this will include <code>defineWorkflow</code>. Then you can call the function with your desired workflow definition. You can also make use of all of typescript's features, such as defining parts of your configuration through variables or functions.</p> <pre><code>import { defineWorkflow } from '@n8n-compose/core';\n\nexport default defineWorkflow({...});\n</code></pre>"},{"location":"core/usage/#include-code-in-your-workflow","title":"Include code in your workflow","text":"<p>Also exposes <code>file</code> function, which allows you to provide either a javascript of a typescript file as <code>parameters</code> to a code cell.</p> <p>An example usecase is if you have a code node the content of which you want to version control in git. You can store your code in <code>my-code-node.js</code>, and then \"import\" it in your <code>n8n-compose.ts</code> file:</p> <p>```ts import { ..., file } from '@n8n-compose/core';</p> <p>export default defineWorkflow({     ...,     {       parameters: {         file(\"./my-code-node.js\")       },       type: \"n8n-nodes-base.code\",       position: [-640, 260],       id: \"...\",       name: \"Code\",     },     ... })</p>"}]}